//
//  LoginInteractor.swift
//  Pods
//
//  Created by John Patrick Teruel on 4/19/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginBusinessLogic
{
    func restoreSession()
    func requestAuthorization(request: Login.Authorization.Request)
    func handleRedirect(request: Login.Redirect.Request)
}

protocol LoginDataStore
{
    var moduleData: LoginModuleData! { get set }
}

class LoginInteractor: LoginBusinessLogic, LoginDataStore
{
    var presenter: LoginPresentationLogic?
    var worker: LoginWorker?
    var moduleData: LoginModuleData!
    //var name: String = ""
    
    // MARK: Do something
    
    func restoreSession() {
        guard moduleData.loginService.reauthorizeUser() else {
            return
        }
        // if success, will proceed to the landing screen
        self.moduleData.delegate.navigateToLandingScreen()
    }
    func requestAuthorization(request: Login.Authorization.Request) {
        let url = moduleData.loginService.getOauth2URL()
        presenter?.presentAuthorizationWebView(response: .init(oauthURL: url))
    }
    
    func handleRedirect(request: Login.Redirect.Request) {
        guard let token = moduleData.loginService.parseToken(from: request.url) else {
            return
        }
        presenter?.dismissWebView()
        
        // start processing
        moduleData.loginService.authorizeUser(token: token)
        
        // if success, will proceed to the landing screen
        self.moduleData.delegate.navigateToLandingScreen()
    }
}
